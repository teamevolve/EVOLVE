#################################################################################
# Contributors: ericscollins
#################################################################################
#
# Shared utility functions
#
#################################################################################

############################################################
void GAUSS()
############################################################
# Uses seed IY, standard deviation S, and mean AM to
# calculate a gaussian random number. Returns number in V
# This function needs to be verified
############################################################

    ### Local variable defs ###
    float q,
          u1,
	  u2,
	  v1,
	  v2,
	  x1

    ### Random number generation ###
    u1 = randomFromSeed(IY)             # u1 and u2 will have a value between 0 and 1
    u2 = randomFromSeed(IY)
    v1 = 2 * u1 - 1
    v2 = 2 * u2 - 1
    q = v1 ** 2 + v2 ** 2

    ### Check if number is valid ### 
    if (q <= 1)
        x1 = v1 * sqrt(-2 * ln(Q) / Q)
    	V = x1 * S + AM
    else
        # Try again if invalid
        GAUSS()
    
    
############################################################
void ALFREQ(int dumy)
############################################################
# Calculates allele frequency of the M allele
############################################################

    ### Local Variables ###
    float answer

    # if allele is extinct, return 0
    if ((RSLT[1][dumy-1] == 0) and (RSLT[2][dumy-1] == 0))
        answer = 0
    else
	answer = (RSLT[1][dumy - 1] + 2 * float(RSLT[2][dumy - 1])) /
	         (2 * (RSLT[0][dumy - 1] + RSLT[1][dumy - 1] + RSLT[2][dumy - 1]))
    return answer


############################################################
void GNTSEL(int dumy)
############################################################
# Calculates genotype selection coefficients
############################################################

    # Fill genotype fitness coefficient array
    GNTFIT(dumy)

    # Calculate genotype selection coefficients
    for i in 0..3
        GSELCO[i] = 1 - FTGNT[i]


############################################################
void ALSEL(int dumy)
############################################################
# Calculates allele selection coefficients
############################################################

    # Fill allele fitness coefficient array
    ALFIT(dumy)

    # Calculate allele selection coefficients
    for i in 0..2
        ASELCO[i] = 1 - FITAL[i]


############################################################
void ALFIT(int dumy)
############################################################
# Calculates the relative fitness coefficient of each allele
############################################################

    ### Local declarations ###
    int atot

    # Make sure coeff can be calculated
    if (IGEN > 1)
        # set last generation index
        LGEN = dumy - 1

	# get total number of adults
	atot = RSLT[0][LGEN - 1] + RSLT[1][LGEN - 1] + RSLT[2][LGEN - 1]

	# not sure what this does, checks for valid conditions
	ALFRMP = ALFREQ(LGEN) # wtf, where did this var come from?!
	if ((ALFRMP != 0) and (ALFRMP != 1) and (atot != 0))
	    ALSUR[0] = 0.0
	    ALSUR[1] = 0.0
	    FITAL[0] = 0.0
	    FITAL[1] = 0.0

	    # calculate allele survival rates
	    ALSUR[0] = (1 - ALFREQ(dumy)) / (1 - ALFREQ(LGEN))
	    ALSUR[1] = ALFREQ(dumy) / ALFREQ(LGEN)

	    # calculate relative fitness coefficients
	    if (ALSUR[0] >= ALSUR[1])
	        FITAL[0] = 1.0
		FITAL[1] = ALSUR[1] / ALSUR[0]
	    else
	        FITAL[1] = 1.0
		FITAL[0] = ALSUR[0] / ALSUR[1]
	else
	    print("Warning, Entry into ALFIT with req. of M in previous " +
	          "generation = 0.0 or 1.0, or total # adults = 0.")

    else
        print("Warning, entry into ALFIT with IGEN = 1")
    
        

void GNTFIT(int dumy)
    ...
    


