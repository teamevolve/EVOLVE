************************************************************************¬

**********************************************************************¬

file: MA.RE vrsn: 29 rvsd: 29 May 81

subroutines reprod, m8few, m8many

**********************************************************************¬




FUNCTION: CONTROLS MATING AND REPRODUCTION OF POPULATION, RETURNS
NUMBER OF JUVENILES OF EACH GENOTYPE IN "JUV" ARRAY.
SYNOPSIS:

REPROD ASSIGNS THE ADULTS OF THE PREVIOUS GENERATION TO THE "NOADLT" ARRAY.

2) AFTER INITIALIZING VARIABLES, "REPROD" CALLS 1 OR 2 OTHERROUTINES ("M8FEW"
OR "M8MANY") WHICH RANDOMLY MATE INDIVIDUALSFROM "NOADLT" AND RETURN THE NUMBER
OF EACH OF THE 6 POSSIBLE COMBINATIONS OF MATES IN THE "MATES" ARRAY.
 REPROD THEN CALCULATES THE NUMBER OF YOUNG FROM EACH TYPE OF
MATING FROM THE REPRODUCTIVE RATES ("REPR8") OF THE GENOTYPES
AND PLACES THEM IN THE "NOYONG" ARRAY).

3) FINALLY, THE NUMBER OF YOUNG OF EACH GENOTYPE ARE DETERMINED
FROM "NOYONG" ACCORDING TO MENDELIAN RATIOS AND PLACED INTO
THE "JUV" ARRAY WHICH IS RETURNED TO MAIN.

NOTES:

1) TWO METHODS ARE USED TO CALCULATE THE NUMBER OF EACHCOMBINATION OF MATES BECAUSE NEITHER WORKS WELL OVER THE FULLRANGE OF POPULATION SIZES:

SUBROUTINE "M8FEW" USES THE PROPORTION OF A GENOTYPE AMONGTHE ADULTS TO DETERMINE ITS PROBABILITY OF BEING PICKED AS A PARENT. PAIRS OF PARENTS ARE RANDOMLY SELECTED WITHOUT REPLACEMENT FROM THE "NOADLT" ARRAY AND PLACED INTO THEAPPROPRIATE CELL OF THE "MATES" ARRAY UNTIL "NOADLT" IS EMPTY OR N = "CUTOFF" INDIVIDUALS HAVE BEEN PAIRED.¬

1050 C B) SUBROUTINE "M8MANY" USES "GNTFR", THE PROPORTION OF EACH¬

1051 C GENOTYPE REMAINING IN "NOADLT", TO DIRECTLY CALCULATE¬

1052 C THE PROBABLE NUMBER OF EACH MATING COMBINATION.¬

1053 C 2) METHOD A) IS A MONTE CARLO ALGORITHM TO SIMULATE STOCHASTIC¬

1054 C COMBINATIONS IN SMALL POPULATIONS. HOWEVER, ITRESULTS IN¬

1055 C PROHIBITIVELY LONG RUNNING TIMES WHEN USED WITH LARGE¬

1056 C POPULATIONS. THE RUNNING TIME OF METHOD B) IS ESSENTIALLY¬

1057 C CONSTANT REGARDLESS OF POPULATION SIZE, BUT CANNOT PROPERLY¬

1058 C SIMULATE MATING IN SMALL POPULATIONS.¬

1059 C 3) IN SMALL POPULATIONS ONLY "M8FEW" IS CALLED. FOR POPULATIONS¬

1060 C LARGER THAN "CUTOFF" INDIVIDUALS, "M8FEW" IS CALLED TO MATE¬

1061 C CUTOFF INDIVIDUALS AND "M8MANY" IS CALLED TO MATE THE REST.¬

1062 C THE RUN TIME OF EVOLVE COULD BE REDUCED SOMEWHAT BY REDUCING¬

1063 C THE SIZE OF "CUTOFF" IN BLOCK DATA (CURRENTLY SET = 200).¬

1064 C SUBROUTINE "M8FEW" COULD BE ELIMINATED IF ONLY DETERMINISTIC¬

1065 C MATING IS DESIRED; SUBROUTINE M8MANY COULD BE ELIMINATED IF¬

1066 C POPULATION LIMITS WERE REDUCED, RUN TIME WERE NOT IMPORTANT¬

1067 C &/OR MUCH DRIFT IS DESIRED.¬

1068 C 4) THE "MATES" ARRAY HOLDS THE NUMBER OF INDIVIDUALS INVOLVED IN¬

1069 C EACH OF THE 6 COMBINATIONS OF PARENTS:¬

1070 C MATES(1) = # OF WW-WW MATINGS, MATES(2) = # OF WW-WM MATINGS,¬

1071 C MATES(3) = # OF WW-WW MATINGS, MATES(6) = # OF WW-WM MATINGS,¬

1072 C MATES(5) = # OF WW-WW MATINGS, MATES(6) = # OF WW-WM MATINGS,¬

1073 C 5) THE "NOYONG" ARRAY HOLDS THE NUMBER OF YOUNG FROM EACH OF THE¬

1074 C 6 COMBINATIONS OF PARENTS. ARRAY ELEMENTS CORRESPOND TO THOSE¬

1075 C IN THE MATES ARRAY.¬

1076 C 6) ALTHOUGH THE DATA ARE INTEGER, VARIABLES "JUV" AND "NOYONG"¬

1077 C ARE DECLARED TO BE REAL TO AVOID POSSIBLE INTEGER OVERFLOW IN¬

1078 C 16-BIT MACHINES. THE VARIABLES POTENTIALLY COULD REACH VALUES¬

1079 C OF (REPR8 * MXPOP1) = (10.0 * 5000) = 50,000.¬

EVOLVE v1 FORTRAN Source.txt Page 19 of 43

Saved: 2003/04/28, 10:14:09 Printed For: Frank Price

1080 C¬

1081 C CALLED FROM: MAIN¬

1082 C CALLS: M8FEW - RANDOMLY MATES N = "CUTOFF" INDIVIDUALS, RETURNS¬

1083 C "MATES" ARRAY¬

1084 C M8MANY - RANDOMLY MATES REMAINDER OF POPULATION, ADDS THEM¬

1085 C TO THE "MATES" ARRAY.¬

1086 C GAUSS - RETURNS "V", A PSEUDORANDOM NUMBER WITH GIVEN MEAN¬

1087 C AND STANDARD DEVIATION TO DETERMINE REPRODUCTIVE¬

1088 C SUCCESS OF EACH COMBINATION OF MATES.¬


int currentGen = 1;
int totalAdult;


// juevnile
// result = multidim array

Juvenile runReproduction()
{
	int previousGen = currentGen - 1;

	// clear mates and noyoung (all 0)


	// total # adults = sum of results from ww, wm, mm for previousGen:
	// this probably only works with 2 alleles
	totalAdult = result[1, previousGen] + result[2, previousGen] + result[3, previousGen];

	// clear juveniles array (all 0)

	// store # adults for each allele in prev gen:
	numAdults[i] = result[i, previousGen] for i = [1, 3]

	
}

void mateFew()
{
	int cutoff = 200;
	int count = 0;
	double probability, rand (YFL, pesudorandom 0-1);
	
	int maxPairs = cutoff/2;
	
	integerPair[i] (IPAR) = 0 for i = [1,2]

	for all pairs < maxPairs
		if maxPairs < 1 -> go to end
		if totalAdult <= 0 -> go to end
		
		for all j = [1,2]
			if totalAdult = 0 -> continue
			if totalAdult = 1 && j = 1 ->  m8witSelf(), break;

			rand = random(); // between 0, 1
			probability1 = (double) numAdult[1]/totalAdult
			probability2 = (double) numAdult[2]/totalAdult 

			if rand < probability1 // genotype1 is created
				
			else if rand < probability1 + p2 // genotype2
				
			else // rand > p1 + p2 // genotype3
			totalAdult--
}